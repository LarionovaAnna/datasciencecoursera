{
    "contents" : "#Load required libraries\nlibrary(caret)\nlibrary(rattle)\nlibrary(rpart)\nlibrary(randomForest)\n\n#Set the seed for reproducibility\nset.seed(12345)\n\n\n#load data\n\ntrainUrl <- \"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\"\ntestUrl <- \"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\"\n#read from downloaded files\n#original_training <- read.csv(url(trainUrl), na.strings=c(\"NA\",\"#DIV/0!\",\"\"))\n#original_testing <- read.csv(url(testUrl), na.strings=c(\"NA\",\"#DIV/0!\",\"\"))\n\noriginal_training <- read.csv(\"C:/Documents and Settings/Администратор/Рабочий стол/pml-training.csv\", na.strings=c(\"NA\",\"#DIV/0!\",\"\"))\noriginal_testing <- read.csv(\"C:/Documents and Settings/Администратор/Рабочий стол/pml-testing.csv\", na.strings=c(\"NA\",\"#DIV/0!\",\"\"))\n\n#Splitting original_training data set into two data sets, 60% for training, 40% for testing:\ninTrain <- createDataPartition(y=original_training$classe, p=0.6, list=FALSE)\ntraining <- original_training[inTrain, ]; testing <- training[-inTrain, ]\ndim(training); dim(testing)\n\n\n#Cleaning the data\n#1st cleaning NearZeroVariance Variables\nNZVs <- nearZeroVar(training, saveMetrics=TRUE)\n\n#subset without the NZVs:\nNZVvars <- names(training) %in% c(\"new_window\", \"kurtosis_roll_belt\", \"kurtosis_picth_belt\",\n\"kurtosis_yaw_belt\", \"skewness_roll_belt\", \"skewness_roll_belt.1\", \"skewness_yaw_belt\",\n\"max_yaw_belt\", \"min_yaw_belt\", \"amplitude_yaw_belt\", \"avg_roll_arm\", \"stddev_roll_arm\",\n\"var_roll_arm\", \"avg_pitch_arm\", \"stddev_pitch_arm\", \"var_pitch_arm\", \"avg_yaw_arm\",\n\"stddev_yaw_arm\", \"var_yaw_arm\", \"kurtosis_roll_arm\", \"kurtosis_picth_arm\",\n\"kurtosis_yaw_arm\", \"skewness_roll_arm\", \"skewness_pitch_arm\", \"skewness_yaw_arm\",\n\"max_roll_arm\", \"min_roll_arm\", \"min_pitch_arm\", \"amplitude_roll_arm\", \"amplitude_pitch_arm\",\n\"kurtosis_roll_dumbbell\", \"kurtosis_picth_dumbbell\", \"kurtosis_yaw_dumbbell\", \"skewness_roll_dumbbell\",\n\"skewness_pitch_dumbbell\", \"skewness_yaw_dumbbell\", \"max_yaw_dumbbell\", \"min_yaw_dumbbell\",\n\"amplitude_yaw_dumbbell\", \"kurtosis_roll_forearm\", \"kurtosis_picth_forearm\", \"kurtosis_yaw_forearm\",\n\"skewness_roll_forearm\", \"skewness_pitch_forearm\", \"skewness_yaw_forearm\", \"max_roll_forearm\",\n\"max_yaw_forearm\", \"min_roll_forearm\", \"min_yaw_forearm\", \"amplitude_roll_forearm\",\n\"amplitude_yaw_forearm\", \"avg_roll_forearm\", \"stddev_roll_forearm\", \"var_roll_forearm\",\n\"avg_pitch_forearm\", \"stddev_pitch_forearm\", \"var_pitch_forearm\", \"avg_yaw_forearm\",\n\"stddev_yaw_forearm\", \"var_yaw_forearm\")\n\ntraining <- training[!NZVvars]\ndim(training)\n#[1] 11776   100\n\n#2nd - delete first column of dataset - ID, so that it does not interfere with ML Algorithms:\ntraining <- training[c(-1)]\n\n\n#Transformation 3: cross out variables with too many NA - more than a 60% threshold of NA's:\n\ntemp_training <- training \nfor(i in 1:length(training)) { \n        if( sum( is.na( training[, i] ) ) /nrow(training) >= .6 ) { \n\t\tfor(j in 1:length(temp_training)) {\n\t\t\tif( length( grep(names(training[i]), names(temp_training)[j]) ) ==1)  {\n\t\t\t\ttemp_training <- temp_training[ , -j] \n\t\t\t}\t\n\t\t} \n\t}\n}\n\ndim(temp_training)\n\ntraining <- temp_training\nrm(temp_training)\n#same 3 transformations for original_testing and testing data sets: \n\nclean1 <- colnames(training)\nclean2 <- colnames(training[, -58])\ntesting <- testing[clean1]\noriginal_testing <- original_testing[clean2]\n\ndim(testing); dim(original_testing)\n\n#In order to ensure proper functioning of Decision Trees and especially RandomForest \n#Algorithm with the Test data set (data set provided), we need to coerce the data into the same type.\nfor (i in 1:length(original_testing) ) {\n        for(j in 1:length(training)) {\n\t\tif( length( grep(names(training[i]), names(original_testing)[j]) ) ==1)  {\n\t\t\tclass(original_testing[j]) <- class(training[i])\n\t\t}      \n\t}      \n}\n\noriginal_testing <- rbind(training[2, -58] , original_testing) #note row 2 does not mean anything, this will be removed right.. now:\noriginal_testing <- original_testing[-1,]\n\n\n# Decision Tree prediction\n\nmodFitA1 <- rpart(classe ~ ., data=training, method=\"class\")\n#see plot by following command\n#fancyRpartPlot(modFitA1)\n\npredictionsA1 <- predict(modFitA1, testing, type = \"class\")\n\nconfusionMatrix(predictionsA1, testing$classe)\n\n# Overall Statistics\n                                          \n#                Accuracy : 0.8789          \n#                  95% CI : (0.8715, 0.8861)\n#     No Information Rate : 0.2845          \n#     P-Value [Acc > NIR] : < 2.2e-16 \n\n\n#Random Forests\n\nmodFitB1 <- randomForest(classe ~. , data=training)\n\npredictionsB1 <- predict(modFitB1, testing, type = \"class\")\n\nconfusionMatrix(predictionsB1, testing$classe)\n# Overall Statistics\n                                          \n#                Accuracy : 0.9986          \n#                  95% CI : (0.9975, 0.9993)\n#     No Information Rate : 0.2845          \n#     P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n#                   Kappa : 0.9982          \n#  Mcnemar's Test P-Value : NA \n\n#Random Forests has better results!\n\n\n#Generating Files to submit as answers for the Assignment:\n\n#use best model - Random Forests for prediction of original_testing:\npredictionsB2 <- predict(modFitB1, original_testing, type = \"class\")\n\n#Function to generate files with predictions to submit for assignment:\n\npml_write_files = function(x){\n  n = length(x)\n  for(i in 1:n){\n    filename = paste0(\"problem_id_\",i,\".txt\")\n    write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)\n  }\n}\n\npml_write_files(predictionsB2)",
    "created" : 1424614145885.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2694329646",
    "id" : "21BFCCFC",
    "lastKnownWriteTime" : 1424618301,
    "path" : "C:/Documents and Settings/Администратор/datasciencecoursera/Practical Machine Learning/course_project/course_project.r",
    "project_path" : "course_project.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}